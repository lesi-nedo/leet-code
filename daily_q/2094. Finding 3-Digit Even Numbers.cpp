#include <algorithm>
#include <bitset>
#include <vector>
#include <iostream>
#include <numeric>

using namespace std;


vector<int> findEvenNumbers(const vector<int>& digits) {

    vector freq (10, 0);
    vector<int> result {};

    for (const auto& el: digits) {
        ++freq[el];
    }

    bitset<1> possible {0};
    for (size_t ind = 0; ind < 10; ind+=2) {
        if (freq[ind] > 0 && possible == 0) {
            possible ^= 1;
            break;
        }
    }

    if (possible == 0)
        return result;


    for (int ind_fst = 1; ind_fst < 10; ind_fst++) {
        if (vector cop_freq = freq; cop_freq[ind_fst] > 0) {
            int el {ind_fst*100};
            --cop_freq[ind_fst];

            for (int ind_scnd = 0; ind_scnd < 10; ind_scnd++) {
                if (cop_freq[ind_scnd] > 0) {
                    el += ind_scnd*10;
                    --cop_freq[ind_scnd];

                    for (int ind_thr = 0; ind_thr < 9; ind_thr+=2) {
                        if (cop_freq[ind_thr] > 0) {
                            el += ind_thr;
                            result.push_back(el);
                            el -= ind_thr;
                        }
                    }
                    el -= ind_scnd*10;
                    ++cop_freq[ind_scnd];
                }
            }
        }
    }

    return result;
}


[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
[7, 0, 2, 8, 8, 1, 6, 9, 8, 3, 4, 5, 7, 1, 4, 8, 0, 8, 1, 2, 4, 5, 5, 1, 0, 6, 0, 6, 1, 7, 7, 4, 8, 5, 6, 4, 2, 2, 6, 0, 7, 1, 7, 7, 1, 6, 6, 1, 0, 6, 6, 3, 6, 2, 8, 3, 3, 3, 9, 7, 4, 3, 8, 3, 9, 5, 3, 7, 9, 8, 7, 3, 8, 2, 5, 6, 8, 9, 9, 4, 6, 0, 4, 2, 5, 3, 9, 5, 7, 1, 1, 8, 4, 7, 5, 8, 8, 9, 4, 6]
[5, 7, 6, 2, 4, 5, 4, 5, 2, 1, 7, 5, 7, 6, 5, 7, 3, 4, 7, 1, 3, 8, 3, 9, 2, 7, 8, 4, 3, 5, 3, 3, 5, 2, 8, 9, 8, 9, 8, 9, 4, 8, 6, 9, 1, 4, 8, 1, 6, 7, 5, 5, 3, 1, 4, 9, 5, 8, 1, 4, 7, 8, 5, 4, 1, 1, 6, 1, 8, 6, 8, 3, 6, 5, 6, 3, 5, 4, 4, 9, 9, 7, 9, 8, 9, 8, 9, 5, 1, 3, 8, 1, 3, 9, 5, 7, 9, 2, 3, 0]
[3, 9, 3, 7, 3, 1, 3, 7, 7, 1, 3, 7, 9, 5, 7, 7, 1, 3, 9, 3, 9, 7, 3, 1, 9, 1, 5, 3, 3, 7, 3, 9, 1, 1, 9, 3, 7, 3, 1, 7, 3, 1, 9, 5, 3, 9, 9, 1, 1, 5, 3, 7, 9, 1, 1, 3, 9, 1, 7, 5, 7, 1, 1, 9, 3, 1, 1, 1, 9, 3, 9, 7, 9, 9, 7, 7, 5, 3, 9, 5, 7, 1, 5, 1, 7, 5, 9, 5, 5, 3, 9, 3, 3, 5, 1, 1, 3, 9, 7, 3]
[5, 1, 9, 5, 7, 1, 5, 3, 9, 7, 1, 7, 3, 7, 3, 9, 1, 7, 3, 9, 1, 7, 1, 3, 9, 5, 9, 1, 1, 1, 3, 7, 5, 7, 9, 7, 7, 9, 3, 1, 5, 3, 3, 5, 9, 5, 9, 3, 1, 9, 5, 5, 5, 9, 9, 9, 7, 7, 1, 5, 3, 3, 1, 7, 9, 5, 7, 9, 4, 1, 1, 3, 7, 1, 9, 4, 5, 5, 9, 5, 7, 3, 9, 5, 3, 4, 1, 4, 5, 1, 1, 3, 7, 4, 3, 1, 9, 7, 5, 9]

int main() {

    vector<vector<int>> tests {
        {2,1,3,0},
        // {2,2,8,8,2},

    };

    for (const auto& test: tests) {
        auto res {findEvenNumbers(test)};
        cout << "[";

        for (const auto& el: res) {
            cout << el << ",";
        }
        cout << "]" << endl;
    }

    return 1;
}