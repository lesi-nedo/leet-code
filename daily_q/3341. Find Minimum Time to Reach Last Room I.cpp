#include <climits>
#include <vector>
#include <iostream>
#include <queue>
#include <unordered_set>
#include<bits/stdc++.h>



using namespace std;

struct Cell {
    int est_time;
    vector<int> pos;

    Cell(const int estimation, vector<int> p): est_time(estimation), pos(move(p)) {}

    [[nodiscard]] string to_string() const {
        return std::to_string(pos[0]) + std::to_string(pos[1]);
    }
};

struct CompareCells {
    bool operator() (const Cell& c1, const Cell& c2) const {
        return c1.est_time > c2.est_time;
    }
};


void insert_to_set(
    priority_queue<Cell, vector<Cell>, CompareCells>& openSet, const vector<vector<int>>& moveTime, vector<vector<int>>& g_score,
    const Cell& curr_state, Cell& neighbor, const vector<int>& goal_state)
{
    const auto curr_str = curr_state.to_string();
    const auto neighbor_str = neighbor.to_string();
    auto g_score_neighbor = g_score[neighbor.pos[0]][neighbor.pos[1]];
    auto g_score_curr = g_score[curr_state.pos[0]][curr_state.pos[1]];

    if (
        const auto tentative_score = max(g_score_curr, moveTime[neighbor.pos[0]][neighbor.pos[1]])+1;
        tentative_score < g_score_neighbor
    ) {
        g_score[neighbor.pos[0]][neighbor.pos[1]] = tentative_score;


        neighbor.est_time = tentative_score + abs(goal_state[0] - neighbor.pos[0]) + abs(goal_state[1] - neighbor.pos[1]);


        openSet.push(neighbor);
    }


}

int minTimeToReach(const vector<vector<int>>& moveTime) {
    vector goal_state_vec (2, 0);

    goal_state_vec[0] = static_cast<int>(moveTime.size())-1;
    goal_state_vec[1] = static_cast<int>(moveTime[0].size())-1;

    vector g_score (goal_state_vec[0]+1, vector<int> (goal_state_vec[1]+1, INT_MAX));


    if (goal_state_vec[0] == 0 && goal_state_vec[1] == 0)
        return 0;
    if (goal_state_vec[0] == 1 && goal_state_vec[1] == 0)
        return moveTime[1][0] + 1;
    if (goal_state_vec[0] == 0 && goal_state_vec[1] == 1)
        return moveTime[0][1] + 1;

    const Cell start {moveTime[goal_state_vec[0]][goal_state_vec[1]], {0, 0}};
    const Cell goal_state {0, goal_state_vec};
    priority_queue<Cell, vector<Cell>, CompareCells> openSet;
    openSet.push(start);

    g_score[0][0] = max(0, moveTime[0][0]);

    while (!openSet.empty()) {
        auto current {openSet.top()};
        openSet.pop();

        if (current.pos[0] == goal_state_vec[0] && current.pos[1] == goal_state_vec[1])
            return g_score[current.pos[0]][current.pos[1]];
        const auto curr_x {current.pos[0]};
        const auto curr_y {current.pos[1]};



        vector new_pos {curr_x - 1, curr_y};

        Cell neighbor {0, new_pos};
        if (new_pos[0] >= 0) {

            insert_to_set(openSet, moveTime, g_score, current, neighbor, goal_state_vec);
        }

        new_pos = {curr_x + 1, curr_y};
        neighbor = {0, new_pos};
        if (new_pos[0] <= goal_state_vec[0]) {

            insert_to_set(openSet, moveTime, g_score, current, neighbor, goal_state_vec);
        }

        new_pos = {curr_x, curr_y + 1};
        neighbor = {0, new_pos};
        if (new_pos[1] <= goal_state_vec[1]) {

            insert_to_set(openSet, moveTime, g_score, current, neighbor, goal_state_vec);
        }
        new_pos = {curr_x, curr_y - 1};
        neighbor = {0, new_pos};
        if (new_pos[1] >= 0) {
            insert_to_set(openSet, moveTime, g_score, current, neighbor, goal_state_vec);
        }

    }

    return 0;
}


int main () {
    const vector<vector<vector<int>>> tests{
        {{{0,932,461,492,164,841,521,918,859,22,2,641,645,255,498,754,240,614,317,456,73,213,15,692,738,262,707,191,656,616,717,121,715,299,433,320,933,646,166,620,125,908,248,893,763,973,931,922,862,724},
            {663,661,854,599,26,555,165,952,270,489,87,1,881,773,116,581,431,23,12,391,315,83,119,393,767,330,519,956,184,110,547,142,550,473,984,794,314,971,244,106,178,658,467,731,590,552,84,463,907,896},
        {483,271,316,203,230,510,989,492,727,413,449,355,446,425,16,625,215,930,779,397,519,257,808,55,101,552,783,200,255,585,196,352,587,966,56,854,385,445,946,291,226,939,249,596,729,422,751,630,819,140},
        {362,553,311,376,955,148,95,152,161,844,473,301,117,792,724,407,536,156,415,837,379,348,714,2,247,220,180,373,34,979,143,661,800,130,771,561,126,546,357,152,645,111,175,977,711,551,831,951,153,46},
        {597,589,420,370,856,90,951,876,220,454,308,787,627,423,608,953,495,746,288,590,929,710,538,265,987,340,949,921,805,292,12,357,791,886,539,880,798,999,330,235,417,957,187,540,768,600,418,177,416,399},
        {64,640,319,530,630,312,862,562,748,379,639,203,701,266,757,656,908,308,288,800,593,41,467,694,183,683,936,236,106,190,579,655,168,858,602,841,939,894,347,354,946,927,425,52,387,733,488,702,93,511},
        {325,569,654,24,306,285,396,330,212,222,337,84,264,831,351,68,181,466,763,277,204,806,500,932,337,627,377,721,678,687,874,569,679,514,929,950,299,674,21,251,64,961,757,614,215,982,708,540,235,685},
        {740,720,367,846,944,53,873,816,737,218,803,753,924,261,43,354,908,974,409,374,741,348,237,685,854,656,915,624,478,477,372,810,628,507,936,682,433,877,388,990,17,172,332,553,397,482,840,797,989,149},
        {145,113,817,52,666,668,290,636,725,0,938,647,545,805,975,616,961,792,232,682,423,666,66,11,801,188,756,951,220,180,615,576,623,444,570,54,436,595,243,959,714,901,919,35,906,455,656,342,290,733},
        {773,861,988,145,586,518,940,599,394,639,365,215,80,379,989,827,434,447,636,745,964,56,950,358,680,363,252,847,97,907,889,182,476,301,306,231,60,759,398,881,901,410,826,280,308,669,49,232,122,392},
        {508,535,824,538,835,522,858,487,482,105,265,382,962,598,667,270,17,577,210,149,562,227,689,620,931,503,876,347,996,925,704,77,786,186,854,420,925,766,323,73,722,949,55,921,481,3,857,962,92,229},
        {679,568,82,513,964,266,932,128,512,266,268,580,438,282,798,313,26,463,492,657,328,928,785,715,804,705,51,546,559,303,274,302,962,962,941,605,754,494,496,242,503,41,775,289,815,440,339,576,601,624},
        {483,239,415,294,575,298,374,601,185,134,277,746,297,85,435,971,153,81,31,186,309,217,835,580,182,507,361,407,509,773,515,667,116,929,556,990,373,613,495,603,621,936,648,987,943,802,468,390,444,909},
        {752,166,403,145,998,75,554,658,859,215,422,360,463,560,531,188,308,662,242,132,853,491,296,117,290,300,254,782,637,398,857,318,118,779,912,92,447,444,824,955,357,346,155,69,655,766,408,567,686,0}}},
        {{{0,157,242,726,609,231,58,738,259,677,320,583,70,404,550,269,516,235,265,709,487,17,558,115,686,941,34,164,942,246,366,992,300,620,463,934,41,886,936,142,897,28,458,108,693,261,392,958,261,871},
            {989,368,674,975,254,988,814,840,617,78,782,215,404,329,462,794,701,142,106,673,557,897,706,445,24,649,617,862,936,127,860,205,818,280,93,23,862,703,198,18,949,413,170,431,970,537,152,941,254,374},
        {459,654,471,61,136,132,247,639,913,313,126,818,67,492,57,164,385,55,539,432,229,550,934,892,655,502,101,616,580,500,990,773,245,124,264,720,639,978,189,94,585,188,123,270,281,971,373,451,755,522},
        {731,946,502,663,323,993,197,38,101,34,38,334,379,672,537,648,908,24,602,283,768,167,999,851,827,745,829,597,768,39,691,952,827,999,901,780,298,580,977,5,795,713,59,937,534,577,410,223,242,818},
        {403,14,244,268,693,569,302,332,330,893,995,516,706,965,525,160,770,209,556,90,989,855,902,717,944,288,461,467,589,575,856,826,532,32,801,259,469,272,252,265,247,112,784,302,308,187,425,713,94,635},
        {72,425,578,348,265,640,102,373,685,888,248,265,474,413,373,259,647,858,63,854,989,10,684,509,580,641,805,244,556,212,9,967,200,787,936,691,716,344,914,740,707,4,523,871,469,597,416,181,884,637},
        {6,610,931,226,656,145,552,343,595,781,256,557,668,89,977,57,696,791,223,535,4,482,515,786,485,46,215,435,975,458,495,506,218,738,210,642,592,946,633,134,814,358,403,602,80,721,867,214,599,721},
        {371,613,808,572,148,852,260,808,999,723,826,438,542,719,655,461,622,514,684,194,976,611,992,385,414,40,325,235,464,992,506,837,39,923,143,460,863,88,766,954,317,851,868,919,603,765,937,961,337,132},
        {31,61,735,317,386,170,488,934,802,461,291,407,162,193,774,901,823,443,259,327,973,294,451,741,416,525,5,873,173,58,237,631,135,231,542,787,502,925,622,522,506,303,190,250,330,971,607,360,550,0}}},
        {{{79,9,109,99}, {42,105,19,23}, {63,39,16,107}}},
        {{0,4},{{4,4}}},
        {{{0,0,0}, {0,0,0}}},
        {{{0,1},{1,2}}},
        {{{1,2,1,3,4,1,2,3,4}, {4,2,1,2,5,3,5,7,8}, {6,3,2,4,1,2,3,5,6}, {3,2,1,2,4,5,12,1,1}, {23,12,12,44,1,2,3,4,5}}},
        {{0,225,456,396,946,993,532,688,622,653,173,857,915,821,115,545,180,18,794,743,902,673,133,567,415,159,358,879,315,614,3,2,390,360,553,676,993,600,31,183,37,884,725,72,701,81,492,49,148,172},{109,682,778,574,613,447,254,34,246,407,115,494,977,747,826,304,749,250,612,199,426,755,352,220,30,6,281,462,591,19,994,19,512,444,605,963,789,529,34,581,836,951,471,284,216,240,623,110,762,913},
            {988,23,922,369,237,310,245,659,564,828,683,108,426,732,157,587,92,992,397,360,231,511,792,961,581,752,371,375,973,644,585,493,645,788,172,83,953,540,379,514,418,303,478,599,123,779,777,664,420,330},
        {488,791,269,707,792,483,120,634,784,988,630,446,892,835,659,29,305,763,137,302,632,968,349,102,346,581,131,809,676,696,998,749,702,954,123,633,19,698,989,238,566,860,15,3,936,458,914,897,632,14},
            {721,553,190,645,940,305,647,748,853,441,654,123,878,720,515,629,301,986,637,794,607,395,494,767,370,932,590,638,863,90,622,927,967,149,423,436,676,716,420,550,987,799,506,994,921,79,536,761,191,368},
        {711,25,564,460,993,777,496,707,388,569,692,455,85,346,699,411,530,957,195,56,578,333,991,427,406,534,917,47,668,207,167,79,63,983,213,131,378,987,673,295,102,652,543,303,414,629,882,805,245,294},
        {103,932,146,756,711,890,642,36,205,140,162,628,186,555,210,237,910,299,348,642,736,461,757,508,901,338,249,882,7,561,291,539,577,506,216,501,583,765,184,375,18,33,10,58,936,626,394,807,183,298},
        {838,346,735,8,854,710,843,841,986,973,737,548,546,939,69,676,775,834,794,449,307,681,610,38,879,272,835,407,201,262,689,156,959,954,443,995,153,262,450,625,795,867,661,904,528,143,897,838,305,211},
        {355,278,703,886,433,485,382,711,389,833,207,299,390,448,864,897,600,792,174,616,930,210,652,202,776,365,536,393,144,739,117,535,135,710,200,98,610,51,313,947,589,143,865,592,953,785,879,632,814,422},
        {417,421,10,938,675,21,441,124,373,763,706,396,818,494,759,584,262,328,735,808,400,160,544,290,117,137,345,626,757,114,778,895,436,31,991,435,901,620,886,189,748,33,627,275,180,120,123,921,623,0}}

    };

    for (auto& test: tests) {
        const auto result = minTimeToReach(test);
        cout << "RES: " << result << endl;
    }
    return 1;
}